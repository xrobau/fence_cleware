#!/usr/bin/python -tt

# Source: https://github.com/xrobau/fence_cleware
# Copyright: GPLv3+

import sys, re, os
import atexit
from pipes import quote
sys.path.append("/usr/share/fence")
from fencing import *
from fencing import SUDO_PATH, fail_usage, is_executable, run_command, run_delay

#BEGIN_VERSION_GENERATION
RELEASE_VERSION="1.0.1"
BUILD_DATE="2015-10-03"
REDHAT_COPYRIGHT="GPLv3+"
#END_VERSION_GENERATION

def get_power_status(_, options):
	output = run_command(options, create_command(options, "status"))
	match = re.search('Status:[\\s]*([a-zA-Z]{2,3})', str(output))
	status = match.group(1) if match else None
	if status == "On":
		return "on"
	if status == "Off":
		return "off"
	return 3

def set_power_status(_, options):
	run_command(options, create_command(options, options["--action"]))
	return

def reboot_cycle(_, options):
	output = run_command(options, create_command(options, "cycle"))
	return bool(re.search('chassis power control: cycle', str(output).lower()))

def create_command(options, action):
	cmd = options["--cleware-path"]

	# --serial
	if options.has_key("--serial") and len(options["--serial"]) != 0:
		cmd += " -d " + quote(options["--serial"]) + " -c 1"

	# --action
	if action == "off":
		cmd += " -as 0 0"
	elif action == "on":
		cmd += " -as 0 1"
	elif action == "status":
		cmd += " -rs 0"

	return cmd

def define_new_opts():
	all_opt["serial"] = {
		"getopt" : "s:",
		"longopt" : "serial",
		"help" : "-s, --serial=[serialno]        Serial No of the Cleware Device",
		"required" : "1",
		"shortdesc" : "Serial No of the Cleware Device",
		"default" : "0",
		"order": 1
	}
	all_opt["cleware_path"] = {
		"getopt" : "c:",
		"longopt" : "cleware-path",
		"help" : "--cleware-path=[path]          Path to clewarecontrol binary",
		"required" : "0",
		"shortdesc" : "Path to clewarecontrol binary",
		"default" : "/usr/bin/clewarecontrol",
		"order": 200
	}

def main():
	atexit.register(atexit_handler)

	device_opt = ["serial", "cleware_path", "no_password", "no_login"]
	define_new_opts()

	options = check_input(device_opt, process_input(device_opt))

	docs = {}
	docs["shortdesc"] = "Fence agent for Cleware Power Switch"
	docs["longdesc"] = "fence_cleware is a Power Fencing agent\
which is used with Cleware USB Switches.  This agent requires the support\
software clewarecontrol (https://github.com/xrobau/clewarecontrol)."
	docs["vendorurl"] = ""
	show_docs(options, docs)

	run_delay(options)

	if not is_executable(options["--cleware-path"]):
		fail_usage("clewarecontrol not found or not accessible")

	result = fence_action(None, options, set_power_status, get_power_status, None, reboot_cycle)
	sys.exit(result)

if __name__ == "__main__":
	main()
